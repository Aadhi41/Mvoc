# Encapsulation: Creating a class with private attributes and methods

class BankAccount:
    def __init__(self, account_number, balance):
        self.__account_number = account_number
        self.__balance = balance

    def get_balance(self):
        return self.__balance

    def deposit(self, amount):
        self.__balance += amount
        return f"Deposited ${amount}. New balance: ${self.__balance}"

    def withdraw(self, amount):
        if amount <= self.__balance:
            self.__balance -= amount
            return f"Withdrew ${amount}. New balance: ${self.__balance}"
        else:
            return "Insufficient funds."

# Inheritance: Creating a subclass with additional features

class SavingsAccount(BankAccount):
    def __init__(self, account_number, balance, interest_rate):
        super().__init__(account_number, balance)
        self.__interest_rate = interest_rate

    def add_interest(self):
        interest = self.get_balance() * (self.__interest_rate / 100)
        self.deposit(interest)
        return f"Interest added: ${interest}. New balance: ${self.get_balance()}"

# Abstraction: Creating an abstract class with abstract methods

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.__radius = radius

    def area(self):
        return 3.14159 * self.__radius ** 2

# Polymorphism: Using the same method name with different classes

def get_area(shape):
    return shape.area()

# Creating objects and demonstrating the OOP characteristics

account = BankAccount("123456", 1000)
print(account.deposit(500))
print(account.withdraw(200))

savings_account = SavingsAccount("789012", 2000, 5)
print(savings_account.deposit(1000))
print(savings_account.add_interest())

circle = Circle(5)
print(f"Circle area: {get_area(circle)}")
